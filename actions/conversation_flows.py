# FalconCare - Conversation Flow Management
# Context-aware follow-up questions and conversation management

from typing import Any, Text, Dict, List
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet, FollowupAction


class ActionAskDuration(Action):
    """Ask for symptom duration with context-aware buttons"""

    def name(self) -> Text:
        return "action_ask_duration"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        symptom = tracker.get_slot("symptom") or "рд╕рдорд╕реНрдпрд╛"
        
        buttons = [
            {"title": "рдЖрдЬ рд╕реЗ", "payload": '/inform_duration{"duration":"today"}'},
            {"title": "1-2 рджрд┐рди", "payload": '/inform_duration{"duration":"1-2 days"}'},
            {"title": "3-7 рджрд┐рди", "payload": '/inform_duration{"duration":"3-7 days"}'},
            {"title": "1 рд╕рдкреНрддрд╛рд╣ рд╕реЗ рдЬреНрдпрд╛рджрд╛", "payload": '/inform_duration{"duration":"more than week"}'}
        ]

        dispatcher.utter_message(
            text=f"рдХрдм рд╕реЗ {symptom} рд╣реИ? рдХреГрдкрдпрд╛ рдмрддрд╛рдПрдВ:",
            buttons=buttons
        )
        
        return []


class ActionAskSeverity(Action):
    """Ask for symptom severity with intuitive options"""

    def name(self) -> Text:
        return "action_ask_severity"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        buttons = [
            {"title": "рд╣рд▓реНрдХреА рддрдХрд▓реАрдл", "payload": '/inform_severity{"severity":"mild"}'},
            {"title": "рдордзреНрдпрдо рддрдХрд▓реАрдл", "payload": '/inform_severity{"severity":"moderate"}'},
            {"title": "рдмрд╣реБрдд рддреЗрдЬ рддрдХрд▓реАрдл", "payload": '/inform_severity{"severity":"severe"}'}
        ]

        dispatcher.utter_message(
            text="рдХрд┐рддрдиреА рддрдХрд▓реАрдл рд╣реИ?",
            buttons=buttons
        )
        
        return []


class ActionAskOtherSymptoms(Action):
    """Ask for additional symptoms based on primary symptom"""

    def name(self) -> Text:
        return "action_ask_other_symptoms"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        primary_symptom = tracker.get_slot("symptom") or ""
        
        # Context-aware symptom suggestions
        if "fever" in primary_symptom.lower() or "рдмреБрдЦрд╛рд░" in primary_symptom:
            buttons = [
                {"title": "рд╕рд┐рд░рджрд░реНрдж", "payload": '/inform_symptom{"symptom":"headache"}'},
                {"title": "рд╢рд░реАрд░ рджрд░реНрдж", "payload": '/inform_symptom{"symptom":"body ache"}'},
                {"title": "рдЙрд▓реНрдЯреА", "payload": '/inform_symptom{"symptom":"vomiting"}'},
                {"title": "рдХреЛрдИ рдФрд░ рдирд╣реАрдВ", "payload": "/affirm"}
            ]
        elif "cough" in primary_symptom.lower() or "рдЦрд╛рдВрд╕реА" in primary_symptom:
            buttons = [
                {"title": "рдмреБрдЦрд╛рд░", "payload": '/inform_symptom{"symptom":"fever"}'},
                {"title": "рд╕рд╛рдВрд╕ рдлреВрд▓рдирд╛", "payload": '/inform_symptom{"symptom":"breathing problem"}'},
                {"title": "рд╕реАрдиреЗ рдореЗрдВ рджрд░реНрдж", "payload": '/inform_symptom{"symptom":"chest pain"}'},
                {"title": "рдХреЛрдИ рдФрд░ рдирд╣реАрдВ", "payload": "/affirm"}
            ]
        else:
            buttons = [
                {"title": "рдмреБрдЦрд╛рд░", "payload": '/inform_symptom{"symptom":"fever"}'},
                {"title": "рд╕рд┐рд░рджрд░реНрдж", "payload": '/inform_symptom{"symptom":"headache"}'},
                {"title": "рдХрдордЬреЛрд░реА", "payload": '/inform_symptom{"symptom":"weakness"}'},
                {"title": "рдХреЛрдИ рдФрд░ рдирд╣реАрдВ", "payload": "/affirm"}
            ]

        dispatcher.utter_message(
            text="рдФрд░ рдХреЛрдИ рдкрд░реЗрд╢рд╛рдиреА рд╣реИ?",
            buttons=buttons
        )
        
        return []


class ActionAskLocation(Action):
    """Ask for user location for finding nearby services"""

    def name(self) -> Text:
        return "action_ask_location"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        buttons = [
            {"title": "рд░рд╛рдпрдкреБрд░", "payload": '/inform_location{"location":"raipur"}'},
            {"title": "рдмрд┐рд▓рд╛рд╕рдкреБрд░", "payload": '/inform_location{"location":"bilaspur"}'},
            {"title": "рднрд┐рд▓рд╛рдИ", "payload": '/inform_location{"location":"bhilai"}'},
            {"title": "рджреБрд░реНрдЧ", "payload": '/inform_location{"location":"durg"}'}
        ]

        dispatcher.utter_message(
            text="рдЖрдк рдХрд╣рд╛рдВ рд░рд╣рддреЗ рд╣реИрдВ? рдЕрдкрдирд╛ рдЬрд┐рд▓рд╛ рдпрд╛ рдкрд┐рдирдХреЛрдб рдмрддрд╛рдПрдВ:",
            buttons=buttons
        )
        
        return []


class ActionAskAge(Action):
    """Ask for patient age for personalized advice"""

    def name(self) -> Text:
        return "action_ask_age"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        patient_relation = tracker.get_slot("patient_relation") or ""
        
        if "child" in patient_relation.lower() or "рдмрдЪреНрдЪрд╛" in patient_relation:
            question = "рдмрдЪреНрдЪреЗ рдХреА рдЙрдореНрд░ рдХрд┐рддрдиреА рд╣реИ?"
            buttons = [
                {"title": "1 рд╕рд╛рд▓ рд╕реЗ рдХрдо", "payload": '/inform_age{"age":"under 1 year"}'},
                {"title": "1-5 рд╕рд╛рд▓", "payload": '/inform_age{"age":"1-5 years"}'},
                {"title": "5-12 рд╕рд╛рд▓", "payload": '/inform_age{"age":"5-12 years"}'},
                {"title": "12-18 рд╕рд╛рд▓", "payload": '/inform_age{"age":"12-18 years"}'}
            ]
        else:
            question = "рдорд░реАрдЬ рдХреА рдЙрдореНрд░ рдХрд┐рддрдиреА рд╣реИ?"
            buttons = [
                {"title": "18-30 рд╕рд╛рд▓", "payload": '/inform_age{"age":"18-30 years"}'},
                {"title": "30-50 рд╕рд╛рд▓", "payload": '/inform_age{"age":"30-50 years"}'},
                {"title": "50-65 рд╕рд╛рд▓", "payload": '/inform_age{"age":"50-65 years"}'},
                {"title": "65+ рд╕рд╛рд▓", "payload": '/inform_age{"age":"65+ years"}'}
            ]

        dispatcher.utter_message(text=question, buttons=buttons)
        return []


class ActionProvidePreventionAdvice(Action):
    """Provide contextual prevention advice based on symptoms/diseases"""

    def name(self) -> Text:
        return "action_provide_prevention_advice"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        current_intent = tracker.latest_message.get('intent', {}).get('name', '')
        user_message = tracker.latest_message.get('text', '').lower()
        
        # Provide specific prevention advice based on intent
        if current_intent == "prevention_hygiene" or "hygiene" in user_message:
            advice = self._get_hygiene_advice()
        elif current_intent == "prevention_nutrition" or "nutrition" in user_message:
            advice = self._get_nutrition_advice()
        elif current_intent == "prevention_exercise" or "exercise" in user_message:
            advice = self._get_exercise_advice()
        elif "dengue" in user_message or "рдбреЗрдВрдЧреВ" in user_message:
            advice = self._get_dengue_prevention()
        elif "malaria" in user_message or "рдорд▓реЗрд░рд┐рдпрд╛" in user_message:
            advice = self._get_malaria_prevention()
        else:
            advice = self._get_general_prevention()

        dispatcher.utter_message(text=advice)
        
        # Offer related services
        buttons = [
            {"title": "ЁЯПе рдирдЬрджреАрдХреА рдЕрд╕реНрдкрддрд╛рд▓", "payload": "/find_doctor"},
            {"title": "ЁЯТЙ рдЯреАрдХрд╛рдХрд░рдг", "payload": "/vaccination_schedule"},
            {"title": "ЁЯУК рдмреАрдорд╛рд░реА рдХреА рд╕реНрдерд┐рддрд┐", "payload": "/disease_stats"}
        ]
        
        dispatcher.utter_message(text="рдФрд░ рдХреЛрдИ рдорджрдж рдЪрд╛рд╣рд┐рдП?", buttons=buttons)
        
        return []

    def _get_hygiene_advice(self):
        return """
ЁЯз╝ **рд╕реНрд╡рдЪреНрдЫрддрд╛ рдХреЗ рдорд╣рддреНрд╡рдкреВрд░реНрдг рдирд┐рдпрдо:**

тЬЛ **рд╣рд╛рде рдзреЛрдирд╛:**
тАв рдЦрд╛рдирд╛ рдЦрд╛рдиреЗ рд╕реЗ рдкрд╣рд▓реЗ
тАв рд╢реМрдЪ рдХреЗ рдмрд╛рдж
тАв рдШрд░ рдЖрдиреЗ рдкрд░
тАв 20 рд╕реЗрдХрдВрдб рддрдХ рд╕рд╛рдмреБрди рд╕реЗ рдзреЛрдПрдВ

ЁЯТз **рдкрд╛рдиреА рдХреА рд╕реБрд░рдХреНрд╖рд╛:**
тАв рдЙрдмрд╛рд▓рдХрд░ рдпрд╛ рдлрд┐рд▓реНрдЯрд░ рдХрд░рдХреЗ рдкрд╛рдиреА рдкрд┐рдПрдВ
тАв рдкрд╛рдиреА рдХреЛ рдврдХрдХрд░ рд░рдЦреЗрдВ
тАв рдЯрдВрдХреА рдХреА рдирд┐рдпрдорд┐рдд рд╕рдлрд╛рдИ рдХрд░реЗрдВ

ЁЯПа **рдШрд░ рдХреА рд╕рдлрд╛рдИ:**
тАв рдХреВрдбрд╝рд╛ рдврдХреЗ рдбрд╕реНрдЯрдмрд┐рди рдореЗрдВ рдбрд╛рд▓реЗрдВ
тАв рдШрд░ рдХреЗ рдЖрд╕рдкрд╛рд╕ рдкрд╛рдиреА рди рдЬрдордиреЗ рджреЗрдВ
тАв рд╢реМрдЪрд╛рд▓рдп рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ

ЁЯжЯ **рдХреАрдЯреЛрдВ рд╕реЗ рдмрдЪрд╛рд╡:**
тАв рдордЪреНрдЫрд░рджрд╛рдиреА рдХрд╛ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░реЗрдВ
тАв рдЧрдВрджреЗ рдкрд╛рдиреА рдХреЛ рди рдЬрдордиреЗ рджреЗрдВ
        """

    def _get_nutrition_advice(self):
        return """
ЁЯеЧ **рд╕рдВрддреБрд▓рд┐рдд рдЖрд╣рд╛рд░ рдХреЗ рд▓рд┐рдП:**

ЁЯМ╛ **рдЕрдирд╛рдЬ рдФрд░ рджрд╛рд▓реЗрдВ:**
тАв рдЪрд╛рд╡рд▓, рдЧреЗрд╣реВрдВ, рдЬреНрд╡рд╛рд░, рдмрд╛рдЬрд░рд╛
тАв рджрд╛рд▓, рд░рд╛рдЬрдорд╛, рдЪрдирд╛
тАв рджрд┐рди рдореЗрдВ 2-3 рдмрд╛рд░

ЁЯем **рд╕рдмреНрдЬреА рдФрд░ рдлрд▓:**
тАв рд╣рд░реА рдкрддреНрддреЗрджрд╛рд░ рд╕рдмреНрдЬрд┐рдпрд╛рдВ
тАв рд░рдВрдЧ-рдмрд┐рд░рдВрдЧреЗ рдлрд▓
тАв рджрд┐рди рдореЗрдВ 4-5 рдмрд╛рд░

ЁЯеЫ **рджреВрдз рдФрд░ рдбреЗрдпрд░реА:**
тАв рджреВрдз, рджрд╣реА, рдкрдиреАрд░
тАв рдХреИрд▓реНрд╢рд┐рдпрдо рдФрд░ рдкреНрд░реЛрдЯреАрди рдХреЗ рд▓рд┐рдП
тАв рджрд┐рди рдореЗрдВ 2 рдмрд╛рд░

ЁЯТз **рдкрд╛рдиреА:**
тАв рджрд┐рди рдореЗрдВ 8-10 рдЧрд┐рд▓рд╛рд╕
тАв рдиреАрдВрдмреВ рдкрд╛рдиреА, рдЫрд╛рдЫ рднреА рдкрд┐рдПрдВ

тЭМ **рдХрдо рдХрд░реЗрдВ:**
тАв рддрд▓реА рд╣реБрдИ рдЪреАрдЬреЗрдВ
тАв рдорд┐рдард╛рдИ рдФрд░ рдирдордХреАрди
тАв рдзреВрдореНрд░рдкрд╛рди рдФрд░ рд╢рд░рд╛рдм
        """

    def _get_exercise_advice(self):
        return """
ЁЯПГтАНтЩВя╕П **рджреИрдирд┐рдХ рд╡реНрдпрд╛рдпрд╛рдо рдХреЗ рдлрд╛рдпрджреЗ:**

ЁЯЪ╢тАНтЩАя╕П **рд░реЛрдЬрд╛рдирд╛ рдЯрд╣рд▓рдирд╛:**
тАв рд╕реБрдмрд╣-рд╢рд╛рдо 30 рдорд┐рдирдЯ
тАв рддреЗрдЬрд╝реА рд╕реЗ рдЪрд▓реЗрдВ
тАв рджрд┐рд▓ рдФрд░ рджрд┐рдорд╛рдЧ рдХреЗ рд▓рд┐рдП рдЕрдЪреНрдЫрд╛

ЁЯзШтАНтЩАя╕П **рдпреЛрдЧ рдФрд░ рдкреНрд░рд╛рдгрд╛рдпрд╛рдо:**
тАв рд╕реБрдмрд╣ 15-20 рдорд┐рдирдЯ
тАв рддрдирд╛рд╡ рдХрдо рдХрд░рддрд╛ рд╣реИ
тАв рд▓рдЪреАрд▓рд╛рдкрди рдмрдврд╝рд╛рддрд╛ рд╣реИ

ЁЯТк **рдШрд░реЗрд▓реВ рдХрд╛рдо:**
тАв рд╕рд╛рдл-рд╕рдлрд╛рдИ
тАв рдмрд╛рдЧрд╡рд╛рдиреА
тАв рд╕реАрдврд╝реА рдЪрдврд╝рдирд╛

ЁЯОп **рд▓рдХреНрд╖реНрдп:**
тАв рд╕рдкреНрддрд╛рд╣ рдореЗрдВ 150 рдорд┐рдирдЯ exercise
тАв рдзреАрд░реЗ-рдзреАрд░реЗ рдмрдврд╝рд╛рдПрдВ
тАв рдЕрдкрдиреА рдХреНрд╖рдорддрд╛ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдХрд░реЗрдВ

тЪая╕П **рд╕рд╛рд╡рдзрд╛рдиреА:**
тАв рдбреЙрдХреНрдЯрд░ рдХреА рд╕рд▓рд╛рд╣ рд▓реЗрдВ (рд╡рд┐рд╢реЗрд╖рдХрд░ 50+ рдЙрдореНрд░ рдореЗрдВ)
тАв рджрд░реНрдж рд╣реЛ рддреЛ рд░реБрдХреЗрдВ
        """

    def _get_dengue_prevention(self):
        return """
ЁЯжЯ **рдбреЗрдВрдЧреВ рд╕реЗ рдмрдЪрд╛рд╡:**

ЁЯТз **рдкрд╛рдиреА рдХрд╛ рдкреНрд░рдмрдВрдзрди:**
тАв рдХреВрд▓рд░, рдЯрдВрдХреА рд╕рд╛рдл рд░рдЦреЗрдВ
тАв рдлреВрд▓рджрд╛рди рдХрд╛ рдкрд╛рдиреА рд░реЛрдЬ рдмрджрд▓реЗрдВ
тАв рдмрд╛рд░рд┐рд╢ рдХрд╛ рдкрд╛рдиреА рди рдЬрдордиреЗ рджреЗрдВ

ЁЯПа **рдШрд░ рдХреА рд╕реБрд░рдХреНрд╖рд╛:**
тАв рдЦрд┐рдбрд╝рдХрд┐рдпреЛрдВ рдкрд░ рдЬрд╛рд▓реА рд▓рдЧрд╛рдПрдВ
тАв рдордЪреНрдЫрд░рджрд╛рдиреА рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
тАв рд╢рд╛рдо рдХреЛ рдШрд░ рдмрдВрдж рд░рдЦреЗрдВ

ЁЯСХ **рдХрдкрдбрд╝реЗ:**
тАв рдкреВрд░реЗ рдмрд╛рдЬреВ рдХреЗ рдХрдкрдбрд╝реЗ рдкрд╣рдиреЗрдВ
тАв рд╣рд▓реНрдХреЗ рд░рдВрдЧ рдХреЗ рдХрдкрдбрд╝реЗ
тАв рдордЪреНрдЫрд░ рднрдЧрд╛рдиреЗ рд╡рд╛рд▓реА рдХреНрд░реАрдо рд▓рдЧрд╛рдПрдВ

ЁЯЪи **рд▓рдХреНрд╖рдг рджрд┐рдЦрдиреЗ рдкрд░:**
тАв рддреЗрдЬ рдмреБрдЦрд╛рд░
тАв рд╕рд┐рд░рджрд░реНрдж рдФрд░ рдЖрдВрдЦреЛрдВ рдореЗрдВ рджрд░реНрдж
тАв рддреБрд░рдВрдд рдбреЙрдХреНрдЯрд░ рдХреЛ рджрд┐рдЦрд╛рдПрдВ
        """

    def _get_malaria_prevention(self):
        return """
ЁЯжЯ **рдорд▓реЗрд░рд┐рдпрд╛ рд╕реЗ рдмрдЪрд╛рд╡:**

ЁЯМЩ **рд░рд╛рдд рдХреА рд╕реБрд░рдХреНрд╖рд╛:**
тАв рд╕реЛрддреЗ рд╕рдордп рдордЪреНрдЫрд░рджрд╛рдиреА рдЬрд░реВрд░ рд▓рдЧрд╛рдПрдВ
тАв рдЦрд┐рдбрд╝рдХреА-рджрд░рд╡рд╛рдЬреЗ рдмрдВрдж рд░рдЦреЗрдВ
тАв рдордЪреНрдЫрд░ рдХреЙрдЗрд▓ рдпрд╛ рд╡реЗрдкрд░рд╛рдЗрдЬрд╝рд░ рдХрд╛ рдЙрдкрдпреЛрдЧ

ЁЯПа **рдЖрд╕рдкрд╛рд╕ рдХреА рд╕рдлрд╛рдИ:**
тАв рдирд╛рд▓рд┐рдпреЛрдВ рдХреЛ рд╕рд╛рдл рд░рдЦреЗрдВ
тАв рдкрд╛рдиреА рдХреА рдЯрдВрдХреА рдХреЛ рдврдХреЗрдВ
тАв рдХреВрдбрд╝рд╛-рдХрд░рдХрдЯ рди рдлреИрд▓рд╛рдПрдВ

ЁЯТК **рдЗрд▓рд╛рдЬ:**
тАв рдмреБрдЦрд╛рд░ рдЖрддреЗ рд╣реА рдбреЙрдХреНрдЯрд░ рдХреЛ рджрд┐рдЦрд╛рдПрдВ
тАв рдЦреВрди рдХреА рдЬрд╛рдВрдЪ рдХрд░рд╛рдПрдВ
тАв рджрд╡рд╛ рдкреВрд░рд╛ рдХреЛрд░реНрд╕ рд▓реЗрдВ

ЁЯОп **рд╡рд┐рд╢реЗрд╖ рд╕рд╛рд╡рдзрд╛рдиреА:**
тАв рдЧрд░реНрднрд╡рддреА рдорд╣рд┐рд▓рд╛рдУрдВ рдХреЛ
тАв рдЫреЛрдЯреЗ рдмрдЪреНрдЪреЛрдВ рдХреЛ
тАв рдмреБрдЬреБрд░реНрдЧреЛрдВ рдХреЛ рдЬреНрдпрд╛рджрд╛ рд╕рд╛рд╡рдзрд╛рдиреА
        """

    def _get_general_prevention(self):
        return """
ЁЯЫбя╕П **рд╕рд╛рдорд╛рдиреНрдп рдмреАрдорд╛рд░рд┐рдпреЛрдВ рд╕реЗ рдмрдЪрд╛рд╡:**

ЁЯТк **рдЗрдореНрдпреБрдирд┐рдЯреА рдмрдврд╝рд╛рдПрдВ:**
тАв рд╕рдВрддреБрд▓рд┐рдд рдЖрд╣рд╛рд░ рд▓реЗрдВ
тАв рдирд┐рдпрдорд┐рдд рд╡реНрдпрд╛рдпрд╛рдо рдХрд░реЗрдВ
тАв рдкрд░реНрдпрд╛рдкреНрдд рдиреАрдВрдж рд▓реЗрдВ (7-8 рдШрдВрдЯреЗ)

ЁЯз╝ **рд╕реНрд╡рдЪреНрдЫрддрд╛ рдмрдирд╛рдП рд░рдЦреЗрдВ:**
тАв рдмрд╛рд░-рдмрд╛рд░ рд╣рд╛рде рдзреЛрдПрдВ
тАв рд╕рд╛рдл рдХрдкрдбрд╝реЗ рдкрд╣рдиреЗрдВ
тАв рдШрд░ рдФрд░ рдЖрд╕рдкрд╛рд╕ рдХреА рд╕рдлрд╛рдИ рдХрд░реЗрдВ

ЁЯТЙ **рдЯреАрдХрд╛рдХрд░рдг:**
тАв рд╕рдордп рдкрд░ рдЯреАрдХреЗ рд▓рдЧрд╡рд╛рдПрдВ
тАв рдмрдЪреНрдЪреЛрдВ рдХрд╛ рдкреВрд░рд╛ рдХреЛрд░реНрд╕ рдХрд░рд╛рдПрдВ
тАв рдХреЛрд╡рд┐рдб рдмреВрд╕реНрдЯрд░ рднреА рд▓рдЧрд╡рд╛рдПрдВ

ЁЯПе **рдирд┐рдпрдорд┐рдд рдЬрд╛рдВрдЪ:**
тАв рд╕рд╛рд▓ рдореЗрдВ рдПрдХ рдмрд╛рд░ рд╣реЗрд▓реНрде рдЪреЗрдХрдЕрдк
тАв рдбреЙрдХреНрдЯрд░ рдХреА рд╕рд▓рд╛рд╣ рдорд╛рдиреЗрдВ
тАв рдмреАрдорд╛рд░реА рдХреЗ рд╢реБрд░реБрдЖрддреА рд▓рдХреНрд╖рдгреЛрдВ рдХреЛ рдирдЬрд╝рд░рдЕрдВрджрд╛рдЬрд╝ рди рдХрд░реЗрдВ
        """


class ActionDefaultFallback(Action):
    """Intelligent fallback with health context and helpful suggestions"""

    def name(self) -> Text:
        return "action_default_fallback"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        # Analyze conversation context to provide better fallback
        conversation_stage = tracker.get_slot("conversation_stage")
        last_intent = tracker.latest_message.get('intent', {}).get('name', '')
        
        if conversation_stage == "symptom_assessment":
            fallback_message = """
рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рдореИрдВ рдЖрдкрдХреА рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рдорд╕реНрдпрд╛ рдХреЛ рдкреВрд░реА рддрд░рд╣ рд╕рдордЭ рдирд╣реАрдВ рдкрд╛рдпрд╛ред ЁЯдФ

**рдХреГрдкрдпрд╛ рд╕рд░рд▓ рд╢рдмреНрджреЛрдВ рдореЗрдВ рдмрддрд╛рдПрдВ:**
тАв "рдореБрдЭреЗ рдмреБрдЦрд╛рд░ рд╣реИ"
тАв "рдкреЗрдЯ рдореЗрдВ рджрд░реНрдж рд╣реИ" 
тАв "рд╕рд┐рд░рджрд░реНрдж рд╣реЛ рд░рд╣рд╛ рд╣реИ"
тАв "рд╕рд╛рдВрд╕ рд▓реЗрдиреЗ рдореЗрдВ рддрдХрд▓реАрдл рд╣реИ"
            """
        else:
            fallback_message = """
рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рдореИрдВ рд╕рдордЭ рдирд╣реАрдВ рдкрд╛рдпрд╛ред ЁЯдФ

**рдореИрдВ рдЗрди рдЪреАрдЬреЛрдВ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ:**
тАв рд▓рдХреНрд╖рдгреЛрдВ рдХреА рдЬрд╛рдВрдЪ рдХрд░рдирд╛
тАв рдЯреАрдХрд╛рдХрд░рдг рдХреА рдЬрд╛рдирдХрд╛рд░реА рджреЗрдирд╛  
тАв рдирдЬрджреАрдХреА рдЕрд╕реНрдкрддрд╛рд▓ рдЦреЛрдЬрдирд╛
тАв рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХреА рд╕рд▓рд╛рд╣ рджреЗрдирд╛
тАв рдЧрд▓рдд рдЬрд╛рдирдХрд╛рд░реА рдХреА рдкрд╣рдЪрд╛рди рдХрд░рдирд╛

**рдХреГрдкрдпрд╛ рд╕рд░рд▓ рд╢рдмреНрджреЛрдВ рдореЗрдВ рдЕрдкрдиреА рд╕рдорд╕реНрдпрд╛ рдмрддрд╛рдПрдВ**
            """

        buttons = [
            {"title": "ЁЯдТ рд▓рдХреНрд╖рдг рдЬрд╛рдВрдЪ", "payload": "/symptom_fever"},
            {"title": "ЁЯТЙ рдЯреАрдХрд╛рдХрд░рдг", "payload": "/vaccination_schedule"},
            {"title": "ЁЯПе рдирдЬрджреАрдХреА рдЕрд╕реНрдкрддрд╛рд▓", "payload": "/find_doctor"},
            {"title": "тД╣я╕П рдореЗрд░реА рд╕реБрд╡рд┐рдзрд╛рдПрдВ", "payload": "/bot_capabilities"}
        ]

        dispatcher.utter_message(text=fallback_message, buttons=buttons)
        
        return [SlotSet("conversation_stage", "fallback")]