# Health Guardian AI - Core Medical Actions
# Smart Triage System, Myth Busting, Emergency Response

from typing import Any, Text, Dict, List
import requests
import json
import re
from datetime import datetime
from fuzzywuzzy import fuzz

from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet, FollowupAction


class ActionTriageSymptoms(Action):
    """
    Intelligent medical triage system with RED/YELLOW/GREEN classification
    Analyzes symptoms, duration, severity, and patient age for risk assessment
    """

    def name(self) -> Text:
        return "action_triage_symptoms"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        # Emergency symptoms requiring immediate attention (RED)
        RED_FLAGS = [
            "chest pain", "‡§∏‡•Ä‡§®‡•á ‡§Æ‡•á‡§Ç ‡§¶‡§∞‡•ç‡§¶", "difficulty breathing", "‡§∏‡§æ‡§Ç‡§∏ ‡§®‡§π‡•Ä‡§Ç ‡§Ü ‡§∞‡§π‡•Ä",
            "unconscious", "‡§¨‡•á‡§π‡•ã‡§∂", "heart attack", "‡§¶‡§ø‡§≤ ‡§ï‡§æ ‡§¶‡•å‡§∞‡§æ",
            "severe bleeding", "‡§ñ‡•Ç‡§® ‡§¨‡§π ‡§∞‡§π‡§æ", "stroke", "‡§≤‡§ï‡§µ‡§æ",
            "severe chest pain", "‡§§‡•á‡§ú ‡§∏‡•Ä‡§®‡•á ‡§ï‡§æ ‡§¶‡§∞‡•ç‡§¶", "can't breathe", "‡§∏‡§æ‡§Ç‡§∏ ‡§´‡•Ç‡§≤ ‡§∞‡§π‡•Ä",
            "suicide", "‡§Ü‡§§‡•ç‡§Æ‡§π‡§§‡•ç‡§Ø‡§æ", "bleeding heavily", "‡§¨‡§π‡•Å‡§§ ‡§ñ‡•Ç‡§®",
            "accident", "‡§¶‡•Å‡§∞‡•ç‡§ò‡§ü‡§®‡§æ", "seizure", "‡§¶‡•å‡§∞‡§æ ‡§™‡§°‡§º‡§®‡§æ"
        ]

        # Warning symptoms needing medical attention (YELLOW)
        YELLOW_FLAGS = [
            "high fever 3 days", "3 ‡§¶‡§ø‡§® ‡§∏‡•á ‡§§‡•á‡§ú ‡§¨‡•Å‡§ñ‡§æ‡§∞", "severe vomiting", "‡§¨‡§π‡•Å‡§§ ‡§â‡§≤‡•ç‡§ü‡•Ä",
            "blood in vomit", "‡§ñ‡•Ç‡§® ‡§ï‡•Ä ‡§â‡§≤‡•ç‡§ü‡•Ä", "severe diarrhea", "‡§¨‡§π‡•Å‡§§ ‡§¶‡§∏‡•ç‡§§",
            "dehydration", "‡§™‡§æ‡§®‡•Ä ‡§ï‡•Ä ‡§ï‡§Æ‡•Ä", "persistent fever", "‡§≤‡§ó‡§æ‡§§‡§æ‡§∞ ‡§¨‡•Å‡§ñ‡§æ‡§∞",
            "blood in stool", "‡§ñ‡•Ç‡§® ‡§ï‡•á ‡§¶‡§∏‡•ç‡§§", "severe headache", "‡§§‡•á‡§ú ‡§∏‡§ø‡§∞‡§¶‡§∞‡•ç‡§¶",
            "very weak", "‡§¨‡§π‡•Å‡§§ ‡§ï‡§Æ‡§ú‡•ã‡§∞‡•Ä", "fever with rash", "‡§¨‡•Å‡§ñ‡§æ‡§∞ ‡§î‡§∞ ‡§¶‡§æ‡§®‡•á"
        ]

        # Extract information from tracker
        current_intent = tracker.latest_message.get('intent', {}).get('name', '')
        user_message = tracker.latest_message.get('text', '').lower()
        
        symptom = tracker.get_slot("symptom") or ""
        duration = tracker.get_slot("duration") or ""
        severity = tracker.get_slot("severity") or ""
        patient_age = tracker.get_slot("patient_age") or ""

        # Calculate risk score
        risk_score = 0
        triage_level = "GREEN"

        # Check for emergency symptoms (RED flags)
        for red_flag in RED_FLAGS:
            if red_flag.lower() in user_message or red_flag.lower() in symptom.lower():
                risk_score += 100
                triage_level = "RED"
                break

        # Check for warning symptoms (YELLOW flags) if not RED
        if triage_level != "RED":
            for yellow_flag in YELLOW_FLAGS:
                if yellow_flag.lower() in user_message or yellow_flag.lower() in symptom.lower():
                    risk_score += 50
                    triage_level = "YELLOW"
                    break

        # Severity multiplier
        if "severe" in severity.lower() or "‡§§‡•á‡§ú" in severity or "‡§¨‡§π‡•Å‡§§" in severity:
            risk_score += 30
        elif "moderate" in severity.lower() or "‡§Æ‡§ß‡•ç‡§Ø‡§Æ" in severity:
            risk_score += 15

        # Duration factor
        if any(term in duration.lower() for term in ["week", "‡§∏‡§™‡•ç‡§§‡§æ‡§π", "month", "‡§Æ‡§π‡•Ä‡§®‡§æ"]):
            risk_score += 20
        elif any(term in duration.lower() for term in ["3 days", "3 ‡§¶‡§ø‡§®", "4 days", "4 ‡§¶‡§ø‡§®"]):
            risk_score += 15

        # Age factor (higher risk for children and elderly)
        try:
            age_num = int(re.findall(r'\d+', patient_age)[0]) if patient_age else 25
            if age_num < 5 or age_num > 60:
                risk_score += 10
        except:
            pass

        # Emergency intent check
        if current_intent in ["emergency_severe", "ambulance_help"]:
            risk_score += 100
            triage_level = "RED"

        # Final triage classification based on total risk score
        if risk_score >= 80:
            triage_level = "RED"
        elif risk_score >= 40:
            triage_level = "YELLOW"
        else:
            triage_level = "GREEN"

        # Generate appropriate response
        if triage_level == "RED":
            dispatcher.utter_message(response="utter_emergency_alert")
            return [
                SlotSet("triage_level", "RED"),
                FollowupAction("action_emergency_call")
            ]
        
        elif triage_level == "YELLOW":
            dispatcher.utter_message(response="utter_moderate_warning")
            return [
                SlotSet("triage_level", "YELLOW"),
                FollowupAction("action_find_hospital")
            ]
        
        else:  # GREEN
            dispatcher.utter_message(response="utter_mild_advice")
            # Provide specific home care advice based on symptom
            if "fever" in symptom.lower() or "‡§¨‡•Å‡§ñ‡§æ‡§∞" in symptom:
                advice = "üíß ‡§™‡§æ‡§®‡•Ä ‡§™‡§ø‡§è‡§Ç, ‡§Ü‡§∞‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç, ‡§™‡•à‡§∞‡§æ‡§∏‡§ø‡§ü‡§æ‡§Æ‡•ã‡§≤ ‡§≤‡•á ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§Ö‡§ó‡§∞ 48 ‡§ò‡§Ç‡§ü‡•á ‡§Æ‡•á‡§Ç ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§® ‡§π‡•ã ‡§§‡•ã ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§Æ‡§ø‡§≤‡•á‡§Ç‡•§"
            elif "cough" in symptom.lower() or "‡§ñ‡§æ‡§Ç‡§∏‡•Ä" in symptom:
                advice = "üçØ ‡§ó‡•Å‡§®‡§ó‡•Å‡§®‡§æ ‡§™‡§æ‡§®‡•Ä ‡§î‡§∞ ‡§∂‡§π‡§¶ ‡§≤‡•á‡§Ç‡•§ ‡§≠‡§æ‡§™ ‡§≤‡•á‡§Ç‡•§ ‡§ß‡•Ç‡§Æ‡•ç‡§∞‡§™‡§æ‡§® ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç‡•§"
            elif "stomach" in symptom.lower() or "‡§™‡•á‡§ü" in symptom:
                advice = "üíß ORS ‡§ò‡•ã‡§≤ ‡§™‡§ø‡§è‡§Ç‡•§ ‡§π‡§≤‡•ç‡§ï‡§æ ‡§≠‡•ã‡§ú‡§® ‡§≤‡•á‡§Ç‡•§ ‡§§‡§≤‡•Ä ‡§ö‡•Ä‡§ú‡•á‡§Ç ‡§® ‡§ñ‡§æ‡§è‡§Ç‡•§"
            else:
                advice = "üíß ‡§Ü‡§∞‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç, ‡§™‡§æ‡§®‡•Ä ‡§™‡§ø‡§è‡§Ç‡•§ 2-3 ‡§¶‡§ø‡§® ‡§Æ‡•á‡§Ç ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§® ‡§π‡•ã ‡§§‡•ã ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§Æ‡§ø‡§≤‡•á‡§Ç‡•§"
            
            dispatcher.utter_message(text=advice)
            return [SlotSet("triage_level", "GREEN")]


class ActionEmergencyCall(Action):
    """Emergency response action for RED triage cases"""

    def name(self) -> Text:
        return "action_emergency_call"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        symptom = tracker.get_slot("symptom") or "‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤"
        
        emergency_message = f"""
üö® **‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ**

üìû **‡§§‡•Å‡§∞‡§Ç‡§§ ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç:**
‚Ä¢ ‡§è‡§Æ‡•ç‡§¨‡•Å‡§≤‡•á‡§Ç‡§∏: 108
‚Ä¢ ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤: 102

üè• **‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ:** {symptom}
‚è∞ **‡§∏‡§Æ‡§Ø:** {datetime.now().strftime('%H:%M')}

üó∫Ô∏è **‡§®‡§ø‡§ï‡§ü‡§§‡§Æ ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤ ‡§¶‡•á‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è "‡§®‡§ú‡§¶‡•Ä‡§ï‡•Ä ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤" ‡§≤‡§ø‡§ñ‡•á‡§Ç**
        """

        # Create call buttons
        buttons = [
            {
                "title": "üìû 108 ‡§ï‡•â‡§≤ ‡§ï‡§∞‡•á‡§Ç",
                "payload": "tel:108",
                "type": "phone_number"
            },
            {
                "title": "üè• ‡§®‡§ú‡§¶‡•Ä‡§ï‡•Ä ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤",
                "payload": "/find_doctor"
            }
        ]

        dispatcher.utter_message(text=emergency_message, buttons=buttons)
        
        # Log emergency case for health authorities
        self._log_emergency_case(tracker)
        
        return []

    def _log_emergency_case(self, tracker):
        """Log emergency case for health department dashboard"""
        try:
            emergency_data = {
                "timestamp": datetime.now().isoformat(),
                "user_id": tracker.sender_id,
                "symptom": tracker.get_slot("symptom"),
                "triage_level": "RED",
                "location": tracker.get_slot("user_location"),
                "alert_sent": True
            }
            # In production, save to database
            print(f"EMERGENCY ALERT: {emergency_data}")
        except Exception as e:
            print(f"Error logging emergency: {e}")


class ActionDetectMyth(Action):
    """Detect and counter health myths and misinformation"""

    def name(self) -> Text:
        return "action_detect_myth"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        user_message = tracker.latest_message.get('text', '').lower()
        
        # Load myths database
        myths = self._load_myths_database()
        
        # Check for myths in user message
        detected_myth = self._detect_myth_in_text(user_message, myths)
        
        if detected_myth:
            dispatcher.utter_message(response="utter_myth_detected")
            
            myth_response = f"""
‚ùå **‡§ó‡§≤‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä:** {detected_myth['myth_statement']}

‚úÖ **‡§∏‡§π‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä:**
{detected_myth['fact']}

üìö **‡§∏‡•ç‡§∞‡•ã‡§§:** {detected_myth['source']}

ü©∫ **‡§∏‡§≤‡§æ‡§π:** ‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡•ã‡§ó‡•ç‡§Ø ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§∏‡§≤‡§æ‡§π ‡§≤‡•á‡§Ç‡•§
            """
            
            dispatcher.utter_message(text=myth_response)
            return [SlotSet("myth_detected", True)]
        
        return [SlotSet("myth_detected", False)]

    def _load_myths_database(self):
        """Load comprehensive Indian health myths database"""
        myths = [
            {
                "keywords": ["haldi", "turmeric", "cancer", "cure", "‡§π‡§≤‡•ç‡§¶‡•Ä", "‡§ï‡•à‡§Ç‡§∏‡§∞"],
                "myth_statement": "‡§π‡§≤‡•ç‡§¶‡•Ä ‡§∏‡•á ‡§ï‡•à‡§Ç‡§∏‡§∞ ‡§†‡•Ä‡§ï ‡§π‡•ã ‡§ú‡§æ‡§§‡§æ ‡§π‡•à",
                "fact": "‡§π‡§≤‡•ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§è‡§Ç‡§ü‡•Ä-‡§á‡§Ç‡§´‡•ç‡§≤‡§æ‡§Æ‡•á‡§ü‡§∞‡•Ä ‡§ó‡•Å‡§£ ‡§π‡•à‡§Ç ‡§≤‡•á‡§ï‡§ø‡§® ‡§Ø‡§π ‡§ï‡•à‡§Ç‡§∏‡§∞ ‡§ï‡§æ ‡§á‡§≤‡§æ‡§ú ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ ‡§ï‡•à‡§Ç‡§∏‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§ï ‡§ï‡•Ä ‡§∏‡§≤‡§æ‡§π ‡§î‡§∞ ‡§â‡§ö‡§ø‡§§ ‡§á‡§≤‡§æ‡§ú ‡§ú‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à‡•§",
                "source": "‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§Ö‡§®‡•Å‡§∏‡§Ç‡§ß‡§æ‡§® ‡§™‡§∞‡§ø‡§∑‡§¶ (ICMR)"
            },
            {
                "keywords": ["tb", "touch", "chhune", "‡§´‡•à‡§≤‡§§‡§æ", "tuberculosis"],
                "myth_statement": "TB ‡§õ‡•Ç‡§®‡•á ‡§∏‡•á ‡§´‡•à‡§≤‡§§‡§æ ‡§π‡•à",
                "fact": "TB ‡§π‡§µ‡§æ ‡§ï‡•á ‡§ú‡§∞‡§ø‡§è ‡§´‡•à‡§≤‡§§‡§æ ‡§π‡•à, ‡§õ‡•Ç‡§®‡•á ‡§∏‡•á ‡§®‡§π‡•Ä‡§Ç‡•§ TB ‡§Æ‡§∞‡•Ä‡§ú‡§º ‡§ï‡•á ‡§ñ‡§æ‡§Ç‡§∏‡§®‡•á ‡§Ø‡§æ ‡§õ‡•Ä‡§Ç‡§ï‡§®‡•á ‡§∏‡•á ‡§π‡§µ‡§æ ‡§Æ‡•á‡§Ç ‡§¨‡•à‡§ï‡•ç‡§ü‡•Ä‡§∞‡§ø‡§Ø‡§æ ‡§´‡•à‡§≤‡§§‡§æ ‡§π‡•à‡•§",
                "source": "‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Ø ‡§ï‡•ç‡§∑‡§Ø ‡§∞‡•ã‡§ó ‡§â‡§®‡•ç‡§Æ‡•Ç‡§≤‡§® ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ"
            },
            {
                "keywords": ["vaccine", "autism", "‡§ü‡•Ä‡§ï‡§æ", "‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä", "side effect"],
                "myth_statement": "‡§µ‡•à‡§ï‡•ç‡§∏‡•Ä‡§® ‡§∏‡•á ‡§¨‡§ö‡•ç‡§ö‡•á ‡§¨‡•Ä‡§Æ‡§æ‡§∞ ‡§π‡•ã ‡§ú‡§æ‡§§‡•á ‡§π‡•à‡§Ç",
                "fact": "‡§µ‡•à‡§ï‡•ç‡§∏‡•Ä‡§® ‡§∏‡•Å‡§∞‡§ï‡•ç‡§∑‡§ø‡§§ ‡§π‡•à‡§Ç ‡§î‡§∞ ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡§ø‡§Ø‡•ã‡§Ç ‡§∏‡•á ‡§¨‡§ö‡§æ‡§§‡•Ä ‡§π‡•à‡§Ç‡•§ ‡§π‡§≤‡•ç‡§ï‡•á ‡§∏‡§æ‡§á‡§° ‡§á‡§´‡•á‡§ï‡•ç‡§ü‡•ç‡§∏ ‡§π‡•ã ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§≤‡•á‡§ï‡§ø‡§® ‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡§ø‡§Ø‡•ã‡§Ç ‡§∏‡•á ‡§¨‡§ö‡§æ‡§µ ‡§ú‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à‡•§",
                "source": "‡§≠‡§æ‡§∞‡§§ ‡§∏‡§∞‡§ï‡§æ‡§∞ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§Æ‡§Ç‡§§‡•ç‡§∞‡§æ‡§≤‡§Ø"
            },
            {
                "keywords": ["antibiotics", "virus", "cold", "flu", "‡§è‡§Ç‡§ü‡•Ä‡§¨‡§æ‡§Ø‡•ã‡§ü‡§ø‡§ï"],
                "myth_statement": "‡§è‡§Ç‡§ü‡•Ä‡§¨‡§æ‡§Ø‡•ã‡§ü‡§ø‡§ï ‡§π‡§∞ ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä ‡§†‡•Ä‡§ï ‡§ï‡§∞‡§§‡§æ ‡§π‡•à",
                "fact": "‡§è‡§Ç‡§ü‡•Ä‡§¨‡§æ‡§Ø‡•ã‡§ü‡§ø‡§ï ‡§ï‡•á‡§µ‡§≤ ‡§¨‡•à‡§ï‡•ç‡§ü‡•Ä‡§∞‡§ø‡§Ø‡§≤ ‡§∏‡§Ç‡§ï‡•ç‡§∞‡§Æ‡§£ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡•à, ‡§µ‡§æ‡§Ø‡§∞‡§≤ ‡§¨‡•Ä‡§Æ‡§æ‡§∞‡•Ä (‡§ú‡•Å‡§ï‡§æ‡§Æ, ‡§´‡•ç‡§≤‡•Ç) ‡§ï‡•á ‡§≤‡§ø‡§è ‡§®‡§π‡•Ä‡§Ç‡•§ ‡§ó‡§≤‡§§ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§∏‡•á ‡§™‡•ç‡§∞‡§§‡§ø‡§∞‡•ã‡§ß ‡§¨‡§¢‡§º‡§§‡§æ ‡§π‡•à‡•§",
                "source": "WHO ‡§î‡§∞ ‡§≠‡§æ‡§∞‡§§ ‡§∏‡§∞‡§ï‡§æ‡§∞"
            },
            {
                "keywords": ["cow urine", "‡§ó‡•å‡§Æ‡•Ç‡§§‡•ç‡§∞", "covid", "corona"],
                "myth_statement": "‡§ó‡•å‡§Æ‡•Ç‡§§‡•ç‡§∞ ‡§∏‡•á ‡§ï‡•ã‡§µ‡§ø‡§° ‡§†‡•Ä‡§ï ‡§π‡•ã‡§§‡§æ ‡§π‡•à",
                "fact": "‡§ó‡•å‡§Æ‡•Ç‡§§‡•ç‡§∞ ‡§∏‡•á ‡§ï‡•ã‡§µ‡§ø‡§° ‡§ï‡§æ ‡§á‡§≤‡§æ‡§ú ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§§‡§æ‡•§ ‡§ï‡•ã‡§µ‡§ø‡§° ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡•à‡§ï‡•ç‡§∏‡•Ä‡§®, ‡§Æ‡§æ‡§∏‡•ç‡§ï, ‡§∏‡§æ‡§Æ‡§æ‡§ú‡§ø‡§ï ‡§¶‡•Ç‡§∞‡•Ä ‡§î‡§∞ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§ï‡•Ä ‡§∏‡§≤‡§æ‡§π ‡§ú‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à‡•§",
                "source": "WHO ‡§î‡§∞ ‡§≠‡§æ‡§∞‡§§ ‡§∏‡§∞‡§ï‡§æ‡§∞"
            }
        ]
        return myths

    def _detect_myth_in_text(self, text, myths):
        """Detect if text contains health myth using fuzzy matching"""
        for myth in myths:
            # Check if multiple keywords match
            matched_keywords = 0
            for keyword in myth['keywords']:
                if keyword.lower() in text or fuzz.partial_ratio(keyword.lower(), text) > 80:
                    matched_keywords += 1
            
            # If 2+ keywords match, consider it a myth
            if matched_keywords >= 2:
                return myth
        
        return None