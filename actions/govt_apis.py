# Health Guardian AI - Government API Integration
# CoWIN, IHIP, Hospital Finder, Disease Surveillance

from typing import Any, Text, Dict, List
import requests
import json
from datetime import datetime
from math import radians, sin, cos, sqrt, atan2

from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet


class ActionCheckVaccination(Action):
    """CoWIN API integration for vaccination center lookup"""

    def name(self) -> Text:
        return "action_check_vaccination"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        # Get pincode from slot or ask user
        pincode = tracker.get_slot("user_location")
        if not pincode or len(pincode) != 6:
            dispatcher.utter_message(text="рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ 6 рдЕрдВрдХ рдХрд╛ рдкрд┐рдирдХреЛрдб рдмрддрд╛рдПрдВред")
            return []

        try:
            # CoWIN Public API
            url = "https://cdn-api.co-vin.in/api/v2/appointment/sessions/public/calendarByPin"
            today = datetime.now().strftime("%d-%m-%Y")
            
            params = {"pincode": pincode, "date": today}
            headers = {"User-Agent": "Mozilla/5.0"}
            
            response = requests.get(url, params=params, headers=headers, timeout=5)
            data = response.json()
            
            if data.get('centers'):
                centers = data['centers'][:3]  # Top 3 centers
                message = "ЁЯТЙ **рдЖрдкрдХреЗ рдкрд╛рд╕ рдХреЗ рдЯреАрдХрд╛рдХрд░рдг рдХреЗрдВрджреНрд░:**\n\n"
                
                for idx, center in enumerate(centers, 1):
                    message += f"**{idx}. {center['name']}** ЁЯУН\n"
                    message += f"   ЁЯУо {center['address']}\n"
                    
                    if center['sessions']:
                        session = center['sessions'][0]
                        message += f"   ЁЯСе рдЙрдореНрд░: {session['min_age_limit']}+\n"
                        message += f"   ЁЯТК рд╡реИрдХреНрд╕реАрди: {session['vaccine']}\n"
                        message += f"   ЁЯУЕ рддрд╛рд░реАрдЦ: {session['date']}\n"
                        message += f"   ЁЯОЯя╕П рд╕реНрд▓реЙрдЯ: {session['available_capacity']}\n\n"
                
                message += "ЁЯУ▒ **CoWIN рдРрдк рд╕реЗ рдмреБрдХрд┐рдВрдЧ рдХрд░реЗрдВ** рдпрд╛ **рдЖрд╢рд╛ рдХрд╛рд░реНрдпрдХрд░реНрддрд╛ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ**"
                
                dispatcher.utter_message(text=message)
            else:
                # Fallback with general vaccination info
                fallback_msg = f"""
ЁЯТЙ **рдкрд┐рдирдХреЛрдб {pincode} рдкрд░ рд╡реИрдХреНрд╕реАрди рдХреА рдЬрд╛рдирдХрд╛рд░реА:**

ЁЯПе **рдирд┐рдХрдЯрддрдо рдХреЗрдВрджреНрд░ рдЦреЛрдЬрдиреЗ рдХреЗ рд▓рд┐рдП:**
тАв CoWIN рдРрдк рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ
тАв 104 рдкрд░ рдХреЙрд▓ рдХрд░реЗрдВ
тАв рдЖрд╢рд╛ рдХрд╛рд░реНрдпрдХрд░реНрддрд╛ рд╕реЗ рдорд┐рд▓реЗрдВ

ЁЯУЕ **рдЯреАрдХрд╛рдХрд░рдг рд╕рдордп:** рд╕реБрдмрд╣ 9 рд╕реЗ рд╢рд╛рдо 5 рдмрдЬреЗ
ЁЯТ│ **рдлреАрд╕:** рдореБрдлреНрдд (рд╕рд░рдХрд╛рд░реА рдХреЗрдВрджреНрд░)

ЁЯУЮ **рд╣реЗрд▓реНрдкрд▓рд╛рдЗрди:** 1075
                """
                dispatcher.utter_message(text=fallback_msg)
        
        except Exception as e:
            dispatcher.utter_message(
                text="рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рд╡реИрдХреНрд╕реАрди рдХреА рдЬрд╛рдирдХрд╛рд░реА рд▓рд╛рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реБрдИред рдХреГрдкрдпрд╛ 1075 рдкрд░ рдХреЙрд▓ рдХрд░реЗрдВред"
            )
            print(f"CoWIN API Error: {str(e)}")
        
        return []


class ActionDiseaseStats(Action):
    """Mock IHIP integration for disease surveillance data"""

    def name(self) -> Text:
        return "action_disease_stats"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        # Get district from slot or use default
        district = tracker.get_slot("user_location") or "рд░рд╛рдпрдкреБрд░"
        
        # Mock IHIP data (in production, connect to real API)
        disease_data = self._get_mock_disease_data()
        
        district_lower = district.lower()
        district_key = self._match_district(district_lower, disease_data.keys())
        
        if district_key:
            stats = disease_data[district_key]
            message = f"ЁЯУК **{district.title()} рдореЗрдВ рдмреАрдорд╛рд░рд┐рдпреЛрдВ рдХреА рд╕реНрдерд┐рддрд┐:**\n\n"
            
            for disease, data in stats.items():
                emoji = self._get_disease_emoji(data)
                trend_hindi = self._get_trend_hindi(data['trend'])
                
                message += f"{emoji} **{disease.title()}:** {data['cases']} рдорд╛рдорд▓реЗ ({trend_hindi})\n"
            
            message += f"\nЁЯУЕ **рдЕрдкрдбреЗрдЯ:** {datetime.now().strftime('%d-%m-%Y')}"
            message += "\nЁЯТб **рд╕рд▓рд╛рд╣:** рдордЪреНрдЫрд░реЛрдВ рд╕реЗ рдмрдЪрд╛рд╡ рдХрд░реЗрдВ, рд╕рд╛рдл рдкрд╛рдиреА рдкрд┐рдПрдВ, рд╕реНрд╡рдЪреНрдЫрддрд╛ рдмрдирд╛рдП рд░рдЦреЗрдВред"
            
            # Add alert if any disease is spiking
            alerts = [d for d, data in stats.items() if data.get('alert')]
            if alerts:
                message += f"\n\nЁЯЪи **рдЪреЗрддрд╛рд╡рдиреА:** {', '.join(alerts)} рдХреЗ рдорд╛рдорд▓реЗ рдмрдврд╝ рд░рд╣реЗ рд╣реИрдВред рд╕рд╛рд╡рдзрд╛рди рд░рд╣реЗрдВ!"
            
            dispatcher.utter_message(text=message)
        else:
            dispatcher.utter_message(
                text=f"рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, {district} рдХреЗ рд▓рд┐рдП рдбреЗрдЯрд╛ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред рдХреГрдкрдпрд╛ рдЬрд┐рд▓реЗ рдХрд╛ рдирд╛рдо рд╕реНрдкрд╖реНрдЯ рд░реВрдк рд╕реЗ рдмрддрд╛рдПрдВред"
            )
        
        return []

    def _get_mock_disease_data(self):
        """Mock disease surveillance data for demo"""
        return {
            "raipur": {
                "dengue": {"cases": 145, "trend": "increasing", "alert": True},
                "malaria": {"cases": 67, "trend": "stable", "alert": False},
                "typhoid": {"cases": 23, "trend": "decreasing", "alert": False},
                "diarrhea": {"cases": 89, "trend": "increasing", "alert": False}
            },
            "bilaspur": {
                "dengue": {"cases": 89, "trend": "stable", "alert": False},
                "malaria": {"cases": 134, "trend": "increasing", "alert": True},
                "typhoid": {"cases": 15, "trend": "decreasing", "alert": False},
                "diarrhea": {"cases": 45, "trend": "stable", "alert": False}
            },
            "bhilai": {
                "dengue": {"cases": 78, "trend": "decreasing", "alert": False},
                "malaria": {"cases": 92, "trend": "stable", "alert": False},
                "typhoid": {"cases": 34, "trend": "increasing", "alert": False},
                "diarrhea": {"cases": 67, "trend": "increasing", "alert": True}
            }
        }

    def _match_district(self, input_district, available_districts):
        """Fuzzy match district name"""
        for district in available_districts:
            if input_district in district or district in input_district:
                return district
        return None

    def _get_disease_emoji(self, data):
        """Get appropriate emoji based on disease status"""
        if data['alert']:
            return "ЁЯЪи"
        elif data['trend'] == "increasing":
            return "тЪая╕П"
        elif data['trend'] == "decreasing":
            return "тЬЕ"
        else:
            return "тД╣я╕П"

    def _get_trend_hindi(self, trend):
        """Convert trend to Hindi"""
        trend_map = {
            "increasing": "рдмрдврд╝ рд░рд╣реЗ",
            "decreasing": "рдШрдЯ рд░рд╣реЗ",
            "stable": "рд╕реНрдерд┐рд░"
        }
        return trend_map.get(trend, "рд╕реНрдерд┐рд░")


class ActionFindHospital(Action):
    """Find nearest hospitals and healthcare facilities"""

    def name(self) -> Text:
        return "action_find_hospital"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        # Try to get location from slot
        user_location = tracker.get_slot("user_location")
        
        if not user_location:
            # Use default location or ask user
            user_location = "raipur"  # Default to Raipur
        
        # Get hospitals (mock data for demo, use real API in production)
        hospitals = self._get_hospitals_data(user_location)
        
        if hospitals:
            message = "ЁЯПе **рдЖрдкрдХреЗ рдкрд╛рд╕ рдХреЗ рдЕрд╕реНрдкрддрд╛рд▓/рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХреЗрдВрджреНрд░:**\n\n"
            
            for idx, hospital in enumerate(hospitals[:3], 1):
                message += f"**{idx}. {hospital['name']}** ЁЯУН\n"
                message += f"   ЁЯУо {hospital['address']}\n"
                message += f"   ЁЯУП рджреВрд░реА: ~{hospital['distance']} km\n"
                message += f"   ЁЯУЮ рдлреЛрди: {hospital['phone']}\n"
                message += f"   ЁЯЪи рдЖрдкрд╛рддрдХрд╛рд▓: {'рд╣рд╛рдВ' if hospital['emergency'] else 'рдирд╣реАрдВ'}\n"
                message += f"   тП░ рд╕рдордп: {hospital['timing']}\n\n"
                
            message += "ЁЯЪи **рдЖрдкрд╛рддрдХрд╛рд▓ рдореЗрдВ 108 рдкрд░ рдХреЙрд▓ рдХрд░реЗрдВ**\n"
            message += "ЁЯУ▒ **ASHA рдХрд╛рд░реНрдпрдХрд░реНрддрд╛:** 9876543210"
            
            # Create action buttons
            buttons = [
                {"title": "ЁЯУЮ 108 рдХреЙрд▓ рдХрд░реЗрдВ", "payload": "tel:108"},
                {"title": "ЁЯПе рдФрд░ рдЕрд╕реНрдкрддрд╛рд▓", "payload": "/find_doctor"},
                {"title": "ЁЯУН рджрд┐рд╢рд╛ рджреЗрдЦреЗрдВ", "payload": "/get_directions"}
            ]
            
            dispatcher.utter_message(text=message, buttons=buttons)
        else:
            dispatcher.utter_message(
                text="рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рдкрд╛рд╕ рдореЗрдВ рдЕрд╕реНрдкрддрд╛рд▓ рдирд╣реАрдВ рдорд┐рд▓реЗред рдЖрдкрд╛рддрдХрд╛рд▓ рдореЗрдВ 108 рдкрд░ рдХреЙрд▓ рдХрд░реЗрдВред"
            )
        
        return []

    def _get_hospitals_data(self, location):
        """Get hospital data (mock for demo)"""
        hospital_database = {
            "raipur": [
                {
                    "name": "рдЬрд┐рд▓рд╛ рдЕрд╕реНрдкрддрд╛рд▓ рд░рд╛рдпрдкреБрд░",
                    "address": "рдЧрдВрдзреА рдЪреМрдХ, рд░рд╛рдпрдкреБрд░, рдЫрддреНрддреАрд╕рдЧрдврд╝",
                    "distance": 2.5,
                    "phone": "0771-2221111",
                    "emergency": True,
                    "timing": "24x7"
                },
                {
                    "name": "рдкреНрд░рд╛рдердорд┐рдХ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдХреЗрдВрджреНрд░",
                    "address": "рд╕реЗрдХреНрдЯрд░ 1, рд░рд╛рдпрдкреБрд░",
                    "distance": 1.8,
                    "phone": "0771-2222222",
                    "emergency": False,
                    "timing": "9:00 - 17:00"
                },
                {
                    "name": "рдЕрдкреЛрд▓реЛ рдЕрд╕реНрдкрддрд╛рд▓",
                    "address": "рдХрдЯреЛрд░рд╛ рддрд╛рд▓рд╛рдм, рд░рд╛рдпрдкреБрд░",
                    "distance": 3.2,
                    "phone": "0771-2233333",
                    "emergency": True,
                    "timing": "24x7"
                }
            ],
            "bilaspur": [
                {
                    "name": "рд╕рд░рдХрд╛рд░реА рдЕрд╕реНрдкрддрд╛рд▓ рдмрд┐рд▓рд╛рд╕рдкреБрд░",
                    "address": "рд▓рд┐рдВрдХ рд░реЛрдб, рдмрд┐рд▓рд╛рд╕рдкреБрд░",
                    "distance": 1.5,
                    "phone": "07752-220000",
                    "emergency": True,
                    "timing": "24x7"
                },
                {
                    "name": "CHC рдмрд┐рд▓рд╛рд╕рдкреБрд░",
                    "address": "рдмрд╕ рд╕реНрдЯреИрдВрдб рдХреЗ рдкрд╛рд╕, рдмрд┐рд▓рд╛рд╕рдкреБрд░",
                    "distance": 2.1,
                    "phone": "07752-221111",
                    "emergency": False,
                    "timing": "8:00 - 16:00"
                }
            ]
        }
        
        # Match location
        location_lower = location.lower()
        for key in hospital_database.keys():
            if key in location_lower or location_lower in key:
                return hospital_database[key]
        
        # Default to Raipur if no match
        return hospital_database.get("raipur", [])


class ActionVaccinationReminder(Action):
    """Vaccination schedule and reminder system"""

    def name(self) -> Text:
        return "action_vaccination_reminder"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        # Get child age if available
        patient_age = tracker.get_slot("patient_age") or ""
        
        try:
            age_months = self._parse_age_to_months(patient_age)
            schedule = self._get_vaccination_schedule(age_months)
            
            if schedule:
                message = f"ЁЯТЙ **рдмрдЪреНрдЪреЗ рдХрд╛ рдЯреАрдХрд╛рдХрд░рдг рдХрд╛рд░реНрдпрдХреНрд░рдо ({patient_age}):**\n\n"
                message += schedule
                message += "\n\nЁЯУ▒ **рдпрд╛рджрджрд╛рд╢реНрдд рдХреЗ рд▓рд┐рдП:** рдЕрдкрдиреЗ рдлреЛрди рдореЗрдВ рд░рд┐рдорд╛рдЗрдВрдбрд░ рд╕реЗрдЯ рдХрд░реЗрдВ"
                message += "\nЁЯПе **рдХрд╣рд╛рдВ рд▓рдЧрд╡рд╛рдПрдВ:** рдирдЬрджреАрдХреА рдЖрдВрдЧрдирд╡рд╛рдбрд╝реА, PHC, рдпрд╛ рд╕рд░рдХрд╛рд░реА рдЕрд╕реНрдкрддрд╛рд▓"
                
                buttons = [
                    {"title": "ЁЯУН рдирдЬрджреАрдХреА рдХреЗрдВрджреНрд░", "payload": "/find_doctor"},
                    {"title": "ЁЯУЕ рдЕрдЧрд▓рд╛ рдЯреАрдХрд╛", "payload": "/vaccination_schedule"},
                    {"title": "ЁЯТЙ рдХреЛрд╡рд┐рдб рд╡реИрдХреНрд╕реАрди", "payload": "/vaccination_covid"}
                ]
                
                dispatcher.utter_message(text=message, buttons=buttons)
            else:
                self._send_general_vaccination_info(dispatcher)
                
        except:
            self._send_general_vaccination_info(dispatcher)
        
        return []

    def _parse_age_to_months(self, age_text):
        """Parse age text to months"""
        import re
        
        # Extract numbers from age text
        numbers = re.findall(r'\d+', age_text)
        if not numbers:
            return None
            
        age_num = int(numbers[0])
        
        if "month" in age_text.lower() or "рдорд╣реАрдиреЗ" in age_text:
            return age_num
        elif "year" in age_text.lower() or "рд╕рд╛рд▓" in age_text or "рд╡рд░реНрд╖" in age_text:
            return age_num * 12
        else:
            # Assume months if no unit specified and < 60
            return age_num if age_num < 60 else age_num * 12

    def _get_vaccination_schedule(self, age_months):
        """Get vaccination schedule based on age"""
        if age_months is None:
            return None
            
        schedule_map = {
            0: "ЁЯН╝ **рдЬрдиреНрдо рдХреЗ рд╕рдордп:** BCG, OPV-0, Hepatitis B-1",
            6: "ЁЯТЙ **6 рд╕рдкреНрддрд╛рд╣:** DPT-1, OPV-1, Hepatitis B-2, HIB-1, Rotavirus-1, PCV-1",
            10: "ЁЯТЙ **10 рд╕рдкреНрддрд╛рд╣:** DPT-2, OPV-2, HIB-2, Rotavirus-2, PCV-2", 
            14: "ЁЯТЙ **14 рд╕рдкреНрддрд╛рд╣:** DPT-3, OPV-3, Hepatitis B-3, HIB-3, Rotavirus-3, PCV-3",
            9: "ЁЯТЙ **9 рдорд╣реАрдиреЗ:** Measles-1, JE-1",
            12: "ЁЯТЙ **12 рдорд╣реАрдиреЗ:** Hepatitis A-1",
            15: "ЁЯТЙ **15 рдорд╣реАрдиреЗ:** MMR-1, PCV Booster, JE-2",
            16: "ЁЯТЙ **16-18 рдорд╣реАрдиреЗ:** DPT Booster-1, OPV Booster",
            18: "ЁЯТЙ **18 рдорд╣реАрдиреЗ:** Hepatitis A-2",
            24: "ЁЯТЙ **2 рд╕рд╛рд▓:** Measles-2",
            60: "ЁЯТЙ **5 рд╕рд╛рд▓:** DPT Booster-2"
        }
        
        # Find next due vaccination
        upcoming = []
        for months, vaccine in schedule_map.items():
            if age_months <= months:
                upcoming.append(vaccine)
                
        if upcoming:
            return upcoming[0] + f"\n\nтП░ **рдЕрдЧрд▓рд╛ рдЯреАрдХрд╛:** {upcoming[0] if len(upcoming) > 0 else 'рдкреВрд░рд╛ рд╣реЛ рдЧрдпрд╛'}"
        else:
            return "тЬЕ **рдмрдзрд╛рдИ рд╣реЛ!** рд╕рднреА рдмрдЪрдкрди рдХреЗ рдЯреАрдХреЗ рдкреВрд░реЗ рд╣реЛ рдЧрдПред"

    def _send_general_vaccination_info(self, dispatcher):
        """Send general vaccination information"""
        general_info = """
ЁЯТЙ **рдмрдЪреНрдЪреЛрдВ рдХрд╛ рдЯреАрдХрд╛рдХрд░рдг рдХрд╛рд░реНрдпрдХреНрд░рдо:**

ЁЯН╝ **0-2 рд╕рд╛рд▓:** рд╕рдмрд╕реЗ рдорд╣рддреНрд╡рдкреВрд░реНрдг рдЯреАрдХреЗ
ЁЯУЕ **рд╕рдордп рдкрд░ рдЯреАрдХрд╛:** рдмреАрдорд╛рд░реА рд╕реЗ рдмрдЪрд╛рд╡ рдХреЗ рд▓рд┐рдП рдЬрд░реВрд░реА
ЁЯТ│ **рд╕рднреА рдЯреАрдХреЗ рдореБрдлреНрдд:** рд╕рд░рдХрд╛рд░реА рдХреЗрдВрджреНрд░реЛрдВ рдкрд░

ЁЯУ▒ **рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд▓рд┐рдП:**
тАв рдЖрд╢рд╛ рдХрд╛рд░реНрдпрдХрд░реНрддрд╛ рд╕реЗ рдорд┐рд▓реЗрдВ
тАв рдирдЬрджреАрдХреА рдЖрдВрдЧрдирд╡рд╛рдбрд╝реА рдЬрд╛рдПрдВ
тАв 104 рдкрд░ рдХреЙрд▓ рдХрд░реЗрдВ

ЁЯОп **рдпрд╛рдж рд░рдЦреЗрдВ:** рд╕рдордп рдкрд░ рдЯреАрдХрд╛ = рд╕реНрд╡рд╕реНрде рдмрдЪреНрдЪрд╛
        """
        
        buttons = [
            {"title": "ЁЯУН рдирдЬрджреАрдХреА рдХреЗрдВрджреНрд░", "payload": "/find_doctor"},
            {"title": "ЁЯУЮ 104 рдХреЙрд▓ рдХрд░реЗрдВ", "payload": "tel:104"}
        ]
        
        dispatcher.utter_message(text=general_info, buttons=buttons)